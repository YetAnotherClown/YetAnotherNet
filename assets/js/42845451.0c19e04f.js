"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[736],{20040:e=>{e.exports=JSON.parse('{"functions":[{"name":"start","desc":"Initializes your Routes by adding middleware to your Matter Loop.\\nThis ensures that your Routes run between each frame.\\n\\n:::note\\nPlease make sure that the event you set in the Configuration, or the default, is the same index you used for your\\n``RunService.Heartbeat`` event in your ``Loop:begin()`` method.\\n\\nYour Routes are meant to run on the heartbeat, like most systems. In some cases you may want to run your Routes on different events,\\nin this case it is acceptable to change it to a different event.\\n:::","params":[{"name":"loop","desc":"A Matter Loop","lua_type":"Loop"},{"name":"routes","desc":"A table of your Routes","lua_type":"{ Route }"}],"returns":[],"function_type":"static","source":{"line":419,"path":"lib/init.luau"}},{"name":"createHook","desc":"This function allows you to run the scheduling code on your own events.\\n\\nBecause scheduling should be ran at the beginning and end of each frame,\\nthis will return two functions which you can use to call the scheduling\\ncode for the beginning and end of a frame. \\n\\nFor example, to run scheduling on the Heartbeat:\\n```lua\\nlocal beginFrame, endFrame = YetAnotherNet.createHook({ Route })\\nRunService.Heartbeat:Connect(function()\\n\\tbeginFrame()\\n\\n\\tRoute:send(...)\\n\\tfor i, player, data in Route:query() do\\n\\t\\t-- Do something\\n\\tend\\n\\n\\tendFrame()\\nend)\\n```","params":[{"name":"routes","desc":"A table of Routes to run with these hooks","lua_type":"{ Route }"}],"returns":[{"desc":"Begin frame hook","lua_type":"() -> ()"},{"desc":"End frame hook","lua_type":"() -> ()"}],"function_type":"static","source":{"line":493,"path":"lib/init.luau"}},{"name":"createConnection","desc":"Creates a connection to allow you to use Routes as if they were Signals.\\n\\nThis method of reading data from Routes should be considered second-class.\\nThe use of [Route:query] in a loop will always be first-class.\\n\\nConnections will always be called on the end of frame when using [YetAnotherNet.createHook]\\nor [YetAnotherNet.start], but will be called in the order they are recieved on the client.\\n\\nIt is only suggested that you use these if you are working outside of a loop or outside\\nof an ECS system.\\n\\n```lua\\nlocal connection = YetAnotherNet.createConnection(Route, function(i, sender, ...)\\n\\tprint(i, sender, ...)\\nend)\\n\\nconnection:disconnect()\\nconnection:reconnect()\\n```","params":[{"name":"route","desc":"The Route to observe","lua_type":"Route"},{"name":"callback","desc":"","lua_type":"(i: number, sender: NetServer | Player, U...) -> ()\\r\\n"}],"returns":[{"desc":"A Connection object","lua_type":"Connection"}],"function_type":"static","source":{"line":541,"path":"lib/init.luau"}}],"properties":[{"name":"server","desc":"A unique identifier used for to identify the Server when sending/querying.\\r","lua_type":"\\"Net_Server\\"","source":{"line":554,"path":"lib/init.luau"}},{"name":"Route","desc":"A uniquely identified Object responsible for handling queries and send requests.\\r","lua_type":"Route","source":{"line":558,"path":"lib/init.luau"}}],"types":[],"name":"YetAnotherNet","desc":"YetAnotherNet is a networking library for Roblox, or rather its a library that wraps around Roblox\'s RemoteEvents to solve certain issues and provide new API for networking on Roblox.\\n\\nSome of the issues this library solves are:\\n- Overhead from RemoteEvents\\n- Ordering of Networking Events\\n- Lack of Type-Checking and Intellisense for working with RemoteEvents\\n\\nYetAnotherNet also provides several utilities:\\n- Middleware\\n- Strict Type-Checking & Auto-completion\\n- Simple integration with Hooks\\n- Data-driven Design\\n\\nYou can learn more about how YetAnotherNet works and how to use it by visiting [Getting Started with Routes](/docs/getting-started/routes).\\nOr, you can keep reading to learn more about the technical details and design choices that went into creating YetAnotherNet in the [Introduction](/docs/intro).","source":{"line":578,"path":"lib/init.luau"}}')}}]);
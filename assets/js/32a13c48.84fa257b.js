"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[824],{16882:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>u,contentTitle:()=>a,default:()=>h,frontMatter:()=>o,metadata:()=>i,toc:()=>l});var t=n(74848),s=n(28453);const o={sidebar_position:1,title:"Squash [Luau/TS]"},a="Squash",i={id:"even-more-compression/squash",title:"Squash [Luau/TS]",description:"Squash is a comprehensive SerDes library",source:"@site/docs/even-more-compression/squash.mdx",sourceDirName:"even-more-compression",slug:"/even-more-compression/squash",permalink:"/YetAnotherNet/docs/even-more-compression/squash",draft:!1,unlisted:!1,editUrl:"https://github.com/YetAnotherClown/YetAnotherNet/edit/main/docs/even-more-compression/squash.mdx",tags:[],version:"current",sidebarPosition:1,frontMatter:{sidebar_position:1,title:"Squash [Luau/TS]"},sidebar:"defaultSidebar",previous:{title:"Buffer Compression",permalink:"/YetAnotherNet/docs/getting-started/buffer-compression"},next:{title:"Flamework Binary Serializer [TS]",permalink:"/YetAnotherNet/docs/even-more-compression/flamework-binary-serializer"}},u={},l=[{value:"Why Also Use Squash",id:"why-also-use-squash",level:2},{value:"Array",id:"array",level:4},{value:"Map",id:"map",level:4},{value:"Record",id:"record",level:4},{value:"Tuple",id:"tuple",level:4},{value:"How To Luau",id:"how-to-luau",level:2},{value:"How To Typescript",id:"how-to-typescript",level:2}];function c(e){const r={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h4:"h4",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...(0,s.R)(),...e.components},{Details:n}=r;return n||function(e,r){throw new Error("Expected "+(r?"component":"object")+" `"+e+"` to be defined: you likely forgot to import, pass, or provide it.")}("Details",!0),(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(r.h1,{id:"squash",children:"Squash"}),"\n",(0,t.jsxs)(r.p,{children:[(0,t.jsx)(r.a,{href:"https://github.com/Data-Oriented-House/Squash",children:"Squash"})," is a comprehensive SerDes library\r\nwhich provides more extensive compression and control over the Buffer Compression of your data than\r\nthe internal SerDes library within YetAnotherNet."]}),"\n",(0,t.jsx)(r.h2,{id:"why-also-use-squash",children:"Why Also Use Squash"}),"\n",(0,t.jsx)(r.p,{children:"Why should you also use Squash when YetAnotherNet already has a SerDes library internally?\r\nGood Question."}),"\n",(0,t.jsx)(r.p,{children:"YetAnotherNet's SerDes library is completely dynamic, outputting a buffer with a format that can be read without any context.\r\nWith Squash, you can explicitly define the data you send and compress it without the overhead of the Internal SerDes Library's dynamic nature."}),"\n",(0,t.jsx)(r.p,{children:"Here are some comparisons between the two from feeding them the same example data:"}),"\n",(0,t.jsxs)(r.table,{children:[(0,t.jsx)(r.thead,{children:(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.th,{children:"Data"}),(0,t.jsx)(r.th,{children:"YetAnotherNet (bytes)"}),(0,t.jsx)(r.th,{children:"Squash (bytes)"})]})}),(0,t.jsxs)(r.tbody,{children:[(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Array"}),(0,t.jsx)(r.td,{children:"45"}),(0,t.jsx)(r.td,{children:"37"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Map"}),(0,t.jsx)(r.td,{children:"66"}),(0,t.jsx)(r.td,{children:"40"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Record"}),(0,t.jsx)(r.td,{children:"283"}),(0,t.jsx)(r.td,{children:"89"})]}),(0,t.jsxs)(r.tr,{children:[(0,t.jsx)(r.td,{children:"Tuple"}),(0,t.jsx)(r.td,{children:"88"}),(0,t.jsx)(r.td,{children:"31"})]})]})]}),"\n",(0,t.jsx)(r.p,{children:(0,t.jsx)(r.em,{children:"Last updated 07/07/2024, size of data is subject to change."})}),"\n",(0,t.jsxs)(n,{children:[(0,t.jsx)("summary",{children:"See Data used for comparisons"}),(0,t.jsx)(r.h4,{id:"array",children:"Array"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"    local array = {1, 2, 3, 4, 5.5, 6.6, -7.7, -8.9, 10.01}\n"})}),(0,t.jsx)(r.h4,{id:"map",children:"Map"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"    local map = {\r\n        [Vector2.new(1, 2)] = Vector3.new(1, 2, 3),\r\n        [Vector2.new(4, 29)] = Vector3.new(4, 29, 33),\r\n        [Vector2.new(72, 483)] = Vector3.new(72, 483, 555),\r\n    }\n"})}),(0,t.jsx)(r.h4,{id:"record",children:"Record"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"    local record = {\r\n        position = Vector2.new(287.3855, -13486.3),\r\n        health = 9,\r\n        name = \"Cedrick\",\r\n        poisoned = true,\r\n        items = {\r\n            { name = 'Lantern', count = 2 },\r\n            { name = 'Waterskin', count = 1 },\r\n            { name = 'Map', count = 4 },\r\n        },\r\n        inns = {\r\n            ['The Copper Cauldron'] = true,\r\n            Infirmary = true,\r\n            ['His Recess'] = true,\r\n        }\r\n    }\n"})}),(0,t.jsx)(r.h4,{id:"tuple",children:"Tuple"}),(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:"    local a, b, c, d = Vector3.new(123456789, 1, 0), CFrame.new(1, 2, 3), BrickColor.new(93), Enum.HumanoidStateType.Freefall\n"})})]}),"\n",(0,t.jsx)(r.p,{children:"These comparisons show the scale of the tradeoff YetAnotherNet took for Dynamic compression, not to mention Squash is very well made.\r\nYetAnotherNet primarily relies on Roblox's built-in compression of Buffers when sending over the network, so it isn't as bad as it seems."}),"\n",(0,t.jsx)(r.p,{children:"Luckily, you can use Squash with YetAnotherNet without any large overhead as it accepts buffers as valid types to send over the network!"}),"\n",(0,t.jsx)(r.h2,{id:"how-to-luau",children:"How To Luau"}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-lua",children:'local Squash = require("@packages/Squash")\r\nlocal YetAnotherNet = require("@packages/YetAnotherNet")\r\n\r\nlocal Route = YetAnotherNet.Route\r\ntype Route<U...> = YetAnotherNet.Route<U...>\r\n\r\nlocal route: Route<number, string, boolean> = Route.new({})\r\n\r\nlocal tuple = Squash.tuple(\r\n    Squash.T(Squash.number(8)),\r\n    Squash.T(Squash.string()),\r\n    Squash.T(Squash.boolean())\r\n)\r\n\r\n-- Decompress\r\nroute:addIncomingMiddleware(function(_buffer: unknown)\r\n\tif type(_buffer) ~= "buffer" then\r\n\t\treturn nil -- Drop packet on failed type validation\r\n\tend\r\n\r\n\tlocal cursor = Squash.frombuffer(_buffer)\r\n\treturn tuple.des(cursor)\r\nend)\r\n\r\n-- Compress\r\nroute:addOutgoingMiddleware(function(number, string, boolean)\r\n\tlocal cursor = Squash.cursor()\r\n\ttuple.ser(cursor, number, string, boolean)\r\n\r\n\treturn Squash.tobuffer(cursor)\r\nend)\r\n\r\nreturn {\r\n\troute = route,\r\n}\n'})}),"\n",(0,t.jsx)(r.h2,{id:"how-to-typescript",children:"How To Typescript"}),"\n",(0,t.jsxs)(r.p,{children:["You can find the TypeScript Types for Squash on ",(0,t.jsx)(r.a,{href:"https://www.npmjs.com/package/@rbxts/squash",children:"npm"}),"."]}),"\n",(0,t.jsx)(r.pre,{children:(0,t.jsx)(r.code,{className:"language-ts",children:'import Squash from "@rbxts/squash";\r\nimport Route from "@rbxts/yetanothernet";\r\n\r\nconst route: Route<[number, boolean, string]> = new Route({\r\n    Channel: "Reliable",\r\n    Event: undefined,\r\n});\r\n\r\nconst tuple = Squash.tuple(\r\n    Squash.number(8),\r\n    Squash.string(),\r\n    Squash.boolean()\r\n);\r\n\r\n// Decompress\r\nroute.addIncomingMiddleware(function (_buffer) {\r\n    if (!typeIs(_buffer, "buffer")) {\r\n        return undefined; // Drop packet on failed type validation\r\n    }\r\n\r\n\tconst cursor = Squash.frombuffer(_buffer);\r\n\treturn tuple.des(cursor);\r\n});\r\n\r\n// Compress\r\nroute.addOutgoingMiddleware(function (number, string, boolean) {\r\n\tconst cursor = Squash.cursor();\r\n\ttuple.ser(cursor, number, string, boolean);\r\n\r\n\treturn $tuple(Squash.tobuffer(cursor));\r\n});\r\n\r\nexport = {\r\n\troute: route,\r\n};\n'})})]})}function h(e={}){const{wrapper:r}={...(0,s.R)(),...e.components};return r?(0,t.jsx)(r,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},28453:(e,r,n)=>{n.d(r,{R:()=>a,x:()=>i});var t=n(96540);const s={},o=t.createContext(s);function a(e){const r=t.useContext(o);return t.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);